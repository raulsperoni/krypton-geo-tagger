input {
  file {
    path => "/tmp/datos/v_mdg_vias.json"
    start_position => beginning
    #sincedb_path => "/dev/null"
    codec => json
    close_older => "1 hour"
    stat_interval => "1 second"
    discover_interval => 15
  }
}

#filter {
#  json {
#    source => "message"
#  }
#}

filter {
  mutate {
    remove_field => ["_id", "type"]
  }
  mutate {
    add_field => { "type" => "street" }
  }



  #  date {
  #     match => ["[created_at]", "EEE MMM dd HH:mm:ss Z yyyy"]
  #     target => "tweet_created_at"
  #  }
  #  date {
  #      match => [ "[user][created_at]", "EEE MMM dd HH:mm:ss Z yyyy" ]
  #      target => "author_account_creation"
  # }

    mutate {
       rename => {
        "[properties][GID]" => "id"
        "[properties][COD_NOMBRE]" => "cod_nombre"
         "[properties][NOM_CALLE]" => "nombre"
       }
   }

   mutate {
    remove_field => ["properties"]
  }
  # Uncomment if you are using an API that give you a sentiment and a score
  #rest {
  #   request => {
  #       url => "http://localhost:5000/predict"
  #       method => "post"
  #       params => {
  #          "submit" => "%{tweet_content}"
  #       }
  #       headers => { "Content-Type" => "application/json" }
  #   }
  #   target => 'rest'
  #}
  #mutate {
  #   rename => {
  #      "[rest][sentiment]" => "sentiment"
  #      "[rest][score]" => "sentiment_score"
  #  }
  #}
  mutate {
    convert => {
      "id" => "integer"
      "cod_nombre" => "integer"
    }
  }

}

output {
   elasticsearch {
     hosts => "elasticsearch:9200"
     index => "montevideo"
     template => "/etc/logstash/templates/montevideo-template.json"
     template_name => "montevideo-template"
     template_overwrite => true
     ilm_enabled => false
   }
  # stdout { }
  stdout {codec => rubydebug}
}