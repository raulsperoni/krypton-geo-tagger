input {
file {
path => "/tmp/datos/*.json"
start_position => beginning
sincedb_path => "/dev/null"
codec => json
close_older => "1 hour"
stat_interval => "1 second"
discover_interval => 15
}
}

filter {
mutate {
remove_field => ["_id", "type"]
}
grok {
match => ["path","/tmp/datos/%{DATA:filename}.json"]
}
mutate {
add_field => {"type" => "%{filename}"}
}
}

filter {
if([type] == "limites_barrios") {
mutate {
rename => {
"[properties][nombarr]" => "nombre"
"[properties][nrobarrio]" => "id"
}
}
}
if([type] == "geonames") {
mutate {
rename => {
"name_aliases" => "aliases"
"name" => "nombre"
}
}
mutate {
remove_field => ["name_accents"]
}
mutate {
add_field => {"[geometry][type]" => "Point"}
}
    ruby {
    code => '
      coordinates = []
      coordinates << event.get("[lon]")
      coordinates << event.get("[lat]")
      event.set("[geometry][coordinates]", coordinates)
    '
  }
mutate {
remove_field => ["name_accents","lon","lat"]
}
}
if([type] == "cruces_vias") {
mutate {
rename => {
"[properties][GID]" => "id"
"[properties][COD_NOMBRE]" => "cod_calle"
"[properties][NOM_CALLE_]" => "nombre"
  "[properties][COD_NOM_01]" => "cod_calle_1"
"[properties][NOM_CAL_01]" => "nombre_1"
}
}

mutate {
convert => {
"cod_calle" => "integer"
  "cod_calle_1" => "integer"
}
}
}
  if([type] == "vias") {
mutate {
rename => {
"[properties][GID]" => "id"
"[properties][COD_NOMBRE]" => "cod_calle"
"[properties][NOM_CALLE]" => "nombre"
}
}

mutate {
convert => {
"cod_calle" => "integer"
}
}
}
    if([type] == "lugares_interes") {
mutate {
rename => {
"[properties][NOMBRE]" => "nombre"
"[properties][DIRECCION]" => "aliases"
}
}


}
if([type] == "espacios_libres") {

ruby {
code => '
nombre = [event.get("[properties][NOMBRE_ESP]").to_s, event.get("[properties][NOM_TIPO_E]").to_s, event.get("[properties][NOM_PARQUE]").to_s].reject(&:empty?).join(" ")
event.set("nombre", nombre) if nombre != ""
  event.set("nombre", "") if nombre == ""
'
}

if ([nombre] == "") {
drop { }
}

mutate {
rename => {
"[properties][GID]" => "id"
}
}
}

mutate {
remove_field => ["properties","filename","host","path"]
}
mutate {
convert => {
"id" => "integer"
}
}
}

output {
elasticsearch {
hosts => "elasticsearch-geo:9200"
index => "montevideo"
template => "/etc/logstash/templates/montevideo-template.json"
template_name => "montevideo-template"
template_overwrite => true
ilm_enabled => false
}
# stdout { }
stdout {codec => rubydebug}
}